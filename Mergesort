package Recursion.Lecture;

import java.util.Arrays;

public class MergeSort_Using_recursion {
    public static void main(String[] args) {
        int[] arr={77,69,13,47,28,91,105};
        arr=MergeSort(arr);
        System.out.println(Arrays.toString(arr));
    }


    static int[] MergeSort(int[] arr){
        if(arr.length==1){
            return arr;
        }
        int mid =arr.length/2;
        int[] left=MergeSort(Arrays.copyOfRange(arr,0,mid));
        int[] right=MergeSort(Arrays.copyOfRange(arr,mid,arr.length));
        return merge(left,right);
    }


    static int[] merge(int[] left, int[] right){
        int[] Ans= new int[left.length+right.length];
        int i=0,j=0,k=0;
        while(i<left.length && j<right.length){
            if(left[i]<right[j]){
                Ans[k]=left[i];
                i++;
            }
            else{
                Ans[k]=right[j];
                j++;
            }
            k++;
        }

        //Incase of any elements  left in any of the array, add those elements directly to the the end of ans(as they ae already sorted above.
        while(i<left.length){
            Ans[k]=left[i];
            i++;
            k++;
        }
        while(j<right.length){
            Ans[k]=right[j];
            j++;
            k++;
        }
        return Ans;
    }
}
